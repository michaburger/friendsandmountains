# Generated by Django 5.2 on 2025-04-09 15:16

import django.db.models.deletion
import django_countries.fields
import phonenumber_field.modelfields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True, help_text='Internal notes about this coupon')),
                ('discount_amount', models.DecimalField(decimal_places=2, help_text='Amount to discount in CHF', max_digits=10)),
                ('expiry_date', models.DateField(help_text='Coupon expires at the end of this day')),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(unique=True)),
                ('couchsurfing_link', models.URLField(blank=True, help_text='Link to couchsurfing event')),
                ('main_image', models.ImageField(upload_to='events/images/')),
                ('event_story', models.TextField(blank=True, help_text='Enter in markdown format')),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('town_name', models.CharField(max_length=200)),
                ('house_name', models.CharField(max_length=200)),
                ('location_desc', models.TextField(help_text='Enter in markdown format')),
                ('location_lat', models.FloatField(blank=True, null=True)),
                ('location_lon', models.FloatField(blank=True, null=True)),
                ('googlemaps_embed', models.TextField(blank=True, help_text='Google Maps embed code')),
                ('how_to_get_there', models.TextField(blank=True, help_text='Enter in markdown format')),
                ('fee', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('fee_desc', models.TextField(blank=True, help_text='Enter in markdown format')),
                ('house_desc', models.TextField(blank=True, help_text='Enter in markdown format')),
                ('registration_state', models.CharField(choices=[('soon', 'Registrations opening soon'), ('open', 'Registrations are open'), ('closed', 'Registrations closed')], default='soon', help_text='Current state of event registration', max_length=30)),
                ('activity_ideas', models.TextField(blank=True, help_text='Enter in markdown format')),
                ('organizers', models.TextField(blank=True, help_text='Enter in markdown format')),
                ('sender_list_id', models.CharField(blank=True, help_text='Sender.net list ID specific to this event', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='GeneralEventInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('general_description', models.TextField(blank=True, help_text='Enter in markdown format')),
                ('food_description', models.TextField(blank=True, help_text='Enter in markdown format')),
                ('registration_description', models.TextField(blank=True, help_text='Enter in markdown format')),
            ],
            options={
                'verbose_name': 'General Event Information',
                'verbose_name_plural': 'General Event Information',
            },
        ),
        migrations.CreateModel(
            name='AccommodationImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='events/accommodations/')),
                ('caption', models.CharField(blank=True, max_length=200)),
                ('order', models.IntegerField(default=0)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accommodation_images', to='web.event')),
            ],
            options={
                'verbose_name': 'Accommodation Image',
                'verbose_name_plural': 'Accommodation Images',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='EventProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('day_activity', models.TextField(blank=True, help_text='Enter in markdown format')),
                ('evening_activity', models.TextField(blank=True, help_text='Enter in markdown format')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='program_days', to='web.event')),
            ],
            options={
                'ordering': ['date'],
            },
        ),
        migrations.CreateModel(
            name='GalleryImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='events/images/')),
                ('caption', models.CharField(blank=True, max_length=200)),
                ('order', models.IntegerField(default=0)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='web.event')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='This will be public to other participants', max_length=200)),
                ('last_name', models.CharField(help_text="This won't be shared on the website", max_length=200)),
                ('email', models.EmailField(help_text='I will send you event related information to your email, make sure it works', max_length=254)),
                ('address', models.TextField(max_length=200)),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(help_text='I might use this to call you for any question or organisational things. There will be a Signal group for the event for which you can sign up if you want, you will receive the link as an email.', max_length=128, region='CH')),
                ('bring_a_friend', models.BooleanField(default=False, help_text='If you want to sign up together with a friend. It is recommended however that your friend fills the registration for themselves as well to get all relevant information.')),
                ('friend_name', models.CharField(blank=True, help_text="Name of your friend if you're bringing someone", max_length=200)),
                ('special_diets', models.TextField(blank=True, help_text='Dietary restrictions or allergies we should know about', max_length=200)),
                ('checkbox1', models.BooleanField(default=False, verbose_name='I have read the entire event description and I agree to the format')),
                ('checkbox2', models.BooleanField(default=False, verbose_name='I am ready to help out with cooking, keeping the house clean, and other tasks')),
                ('checkbox3', models.BooleanField(default=False, verbose_name='I agree to be respectful and inclusive to all other participants')),
                ('checkbox4', models.BooleanField(default=False, verbose_name="I notice that some pictures of the event might be published on this website after the event and I will talk to the organizers if I don't agree")),
                ('checkbox5', models.BooleanField(default=False, verbose_name='I have understood that I have to forward all relevant information to the friend I signed up together with me')),
                ('coupon_code', models.CharField(blank=True, help_text='Enter a discount code if you have one', max_length=50)),
                ('potluck', models.TextField(help_text='What do you plan to bring for the Potluck / International Dinner?', max_length=200)),
                ('activity_idea', models.TextField(blank=True, help_text='Do you have an activity idea that you would like to suggest for other participants that we should keep some time in the program for?', max_length=200)),
                ('other_comments', models.TextField(blank=True, help_text='Any other comments or questions?', max_length=500)),
                ('registered_at', models.DateTimeField(auto_now_add=True)),
                ('original_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('final_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('stripe_payment_intent_id', models.CharField(blank=True, max_length=100)),
                ('coupon', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registrations', to='web.coupon')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='web.event')),
            ],
        ),
        migrations.CreateModel(
            name='SurroundingsImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='events/surroundings/')),
                ('caption', models.CharField(blank=True, max_length=200)),
                ('order', models.IntegerField(default=0)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='surroundings_images', to='web.event')),
            ],
            options={
                'verbose_name': 'Surroundings Image',
                'verbose_name_plural': 'Surroundings Images',
                'ordering': ['order'],
            },
        ),
    ]
